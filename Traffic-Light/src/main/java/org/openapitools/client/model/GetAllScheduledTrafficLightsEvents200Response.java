/*
 * Traffic Lights
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAllScheduledTrafficLightsEvents200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-23T10:39:51.004504690+01:00[Europe/Berlin]")
public class GetAllScheduledTrafficLightsEvents200Response {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private String hours;

  public static final String SERIALIZED_NAME_MINUTES = "minutes";
  @SerializedName(SERIALIZED_NAME_MINUTES)
  private String minutes;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private String month;

  public static final String SERIALIZED_NAME_SECONDS = "seconds";
  @SerializedName(SERIALIZED_NAME_SECONDS)
  private String seconds;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public GetAllScheduledTrafficLightsEvents200Response() {
  }

  public GetAllScheduledTrafficLightsEvents200Response color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    this.color = color;
  }


  public GetAllScheduledTrafficLightsEvents200Response day(String day) {
    
    this.day = day;
    return this;
  }

   /**
   * Get day
   * @return day
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDay() {
    return day;
  }


  public void setDay(String day) {
    this.day = day;
  }


  public GetAllScheduledTrafficLightsEvents200Response hours(String hours) {
    
    this.hours = hours;
    return this;
  }

   /**
   * Get hours
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHours() {
    return hours;
  }


  public void setHours(String hours) {
    this.hours = hours;
  }


  public GetAllScheduledTrafficLightsEvents200Response minutes(String minutes) {
    
    this.minutes = minutes;
    return this;
  }

   /**
   * Get minutes
   * @return minutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMinutes() {
    return minutes;
  }


  public void setMinutes(String minutes) {
    this.minutes = minutes;
  }


  public GetAllScheduledTrafficLightsEvents200Response month(String month) {
    
    this.month = month;
    return this;
  }

   /**
   * Get month
   * @return month
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMonth() {
    return month;
  }


  public void setMonth(String month) {
    this.month = month;
  }


  public GetAllScheduledTrafficLightsEvents200Response seconds(String seconds) {
    
    this.seconds = seconds;
    return this;
  }

   /**
   * Get seconds
   * @return seconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSeconds() {
    return seconds;
  }


  public void setSeconds(String seconds) {
    this.seconds = seconds;
  }


  public GetAllScheduledTrafficLightsEvents200Response street(String street) {
    
    this.street = street;
    return this;
  }

   /**
   * Get street
   * @return street
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStreet() {
    return street;
  }


  public void setStreet(String street) {
    this.street = street;
  }


  public GetAllScheduledTrafficLightsEvents200Response year(String year) {
    
    this.year = year;
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getYear() {
    return year;
  }


  public void setYear(String year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAllScheduledTrafficLightsEvents200Response getAllScheduledTrafficLightsEvents200Response = (GetAllScheduledTrafficLightsEvents200Response) o;
    return Objects.equals(this.color, getAllScheduledTrafficLightsEvents200Response.color) &&
        Objects.equals(this.day, getAllScheduledTrafficLightsEvents200Response.day) &&
        Objects.equals(this.hours, getAllScheduledTrafficLightsEvents200Response.hours) &&
        Objects.equals(this.minutes, getAllScheduledTrafficLightsEvents200Response.minutes) &&
        Objects.equals(this.month, getAllScheduledTrafficLightsEvents200Response.month) &&
        Objects.equals(this.seconds, getAllScheduledTrafficLightsEvents200Response.seconds) &&
        Objects.equals(this.street, getAllScheduledTrafficLightsEvents200Response.street) &&
        Objects.equals(this.year, getAllScheduledTrafficLightsEvents200Response.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, day, hours, minutes, month, seconds, street, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAllScheduledTrafficLightsEvents200Response {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    minutes: ").append(toIndentedString(minutes)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    seconds: ").append(toIndentedString(seconds)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("day");
    openapiFields.add("hours");
    openapiFields.add("minutes");
    openapiFields.add("month");
    openapiFields.add("seconds");
    openapiFields.add("street");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetAllScheduledTrafficLightsEvents200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetAllScheduledTrafficLightsEvents200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAllScheduledTrafficLightsEvents200Response is not found in the empty JSON string", GetAllScheduledTrafficLightsEvents200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetAllScheduledTrafficLightsEvents200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAllScheduledTrafficLightsEvents200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("day") != null && !jsonObj.get("day").isJsonNull()) && !jsonObj.get("day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day").toString()));
      }
      if ((jsonObj.get("hours") != null && !jsonObj.get("hours").isJsonNull()) && !jsonObj.get("hours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hours").toString()));
      }
      if ((jsonObj.get("minutes") != null && !jsonObj.get("minutes").isJsonNull()) && !jsonObj.get("minutes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minutes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minutes").toString()));
      }
      if ((jsonObj.get("month") != null && !jsonObj.get("month").isJsonNull()) && !jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
      if ((jsonObj.get("seconds") != null && !jsonObj.get("seconds").isJsonNull()) && !jsonObj.get("seconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seconds").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) && !jsonObj.get("year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("year").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAllScheduledTrafficLightsEvents200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAllScheduledTrafficLightsEvents200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAllScheduledTrafficLightsEvents200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAllScheduledTrafficLightsEvents200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAllScheduledTrafficLightsEvents200Response>() {
           @Override
           public void write(JsonWriter out, GetAllScheduledTrafficLightsEvents200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAllScheduledTrafficLightsEvents200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetAllScheduledTrafficLightsEvents200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetAllScheduledTrafficLightsEvents200Response
  * @throws IOException if the JSON string is invalid with respect to GetAllScheduledTrafficLightsEvents200Response
  */
  public static GetAllScheduledTrafficLightsEvents200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAllScheduledTrafficLightsEvents200Response.class);
  }

 /**
  * Convert an instance of GetAllScheduledTrafficLightsEvents200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

