/*
 * Traffic Lights
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddUser200Response;
import org.openapitools.client.model.ControlTrafficLights200Response;
import org.openapitools.client.model.ControlTrafficLights400Response;
import org.openapitools.client.model.ControlTrafficLights401Response;
import org.openapitools.client.model.DeleteUser200Response;
import org.openapitools.client.model.GetAllScheduledTrafficLightsEvents200Response;
import org.openapitools.client.model.GetAllScheduledTrafficLightsEvents401Response;
import org.openapitools.client.model.GetAllUsers200ResponseInnerValue;
import org.openapitools.client.model.GetAvailableStreets200Response;
import org.openapitools.client.model.GetTrafficLightsStatus200Response;
import org.openapitools.client.model.GetTrafficLightsStatus400Response;
import org.openapitools.client.model.GetUserRole200Response;
import org.openapitools.client.model.LoginUser200Response;
import org.openapitools.client.model.LoginUser401Response;
import org.openapitools.client.model.LogoutUser200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addUser
     * @param password The password for register. (optional)
     * @param role The user&#39;s role for register. (optional)
     * @param username The username for register. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully added. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Adding user failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserCall(String password, String role, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (role != null) {
            localVarFormParams.put("role", role);
        }

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserValidateBeforeCall(String password, String role, String username, final ApiCallback _callback) throws ApiException {
        return addUserCall(password, role, username, _callback);

    }

    /**
     * Add new user
     * New User will be added
     * @param password The password for register. (optional)
     * @param role The user&#39;s role for register. (optional)
     * @param username The username for register. (optional)
     * @return AddUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully added. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Adding user failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public AddUser200Response addUser(String password, String role, String username) throws ApiException {
        ApiResponse<AddUser200Response> localVarResp = addUserWithHttpInfo(password, role, username);
        return localVarResp.getData();
    }

    /**
     * Add new user
     * New User will be added
     * @param password The password for register. (optional)
     * @param role The user&#39;s role for register. (optional)
     * @param username The username for register. (optional)
     * @return ApiResponse&lt;AddUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully added. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Adding user failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddUser200Response> addUserWithHttpInfo(String password, String role, String username) throws ApiException {
        okhttp3.Call localVarCall = addUserValidateBeforeCall(password, role, username, null);
        Type localVarReturnType = new TypeToken<AddUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new user (asynchronously)
     * New User will be added
     * @param password The password for register. (optional)
     * @param role The user&#39;s role for register. (optional)
     * @param username The username for register. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully added. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Adding user failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserAsync(String password, String role, String username, final ApiCallback<AddUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserValidateBeforeCall(password, role, username, _callback);
        Type localVarReturnType = new TypeToken<AddUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for controlTrafficLights
     * @param street Street whose corresponding traffic lights will be controlled. (required)
     * @param color Traffic Lights color. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switching traffic lights status successfully worked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Switching traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Switching traffic lights status  failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlTrafficLightsCall(String street, String color, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streets/{street}/colors/{color}"
            .replace("{" + "street" + "}", localVarApiClient.escapeString(street.toString()))
            .replace("{" + "color" + "}", localVarApiClient.escapeString(color.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controlTrafficLightsValidateBeforeCall(String street, String color, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'street' is set
        if (street == null) {
            throw new ApiException("Missing the required parameter 'street' when calling controlTrafficLights(Async)");
        }

        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling controlTrafficLights(Async)");
        }

        return controlTrafficLightsCall(street, color, _callback);

    }

    /**
     * Controls the traffic lights
     * Controls the traffic lights of the specified street.
     * @param street Street whose corresponding traffic lights will be controlled. (required)
     * @param color Traffic Lights color. (required)
     * @return ControlTrafficLights200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switching traffic lights status successfully worked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Switching traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Switching traffic lights status  failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ControlTrafficLights200Response controlTrafficLights(String street, String color) throws ApiException {
        ApiResponse<ControlTrafficLights200Response> localVarResp = controlTrafficLightsWithHttpInfo(street, color);
        return localVarResp.getData();
    }

    /**
     * Controls the traffic lights
     * Controls the traffic lights of the specified street.
     * @param street Street whose corresponding traffic lights will be controlled. (required)
     * @param color Traffic Lights color. (required)
     * @return ApiResponse&lt;ControlTrafficLights200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switching traffic lights status successfully worked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Switching traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Switching traffic lights status  failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControlTrafficLights200Response> controlTrafficLightsWithHttpInfo(String street, String color) throws ApiException {
        okhttp3.Call localVarCall = controlTrafficLightsValidateBeforeCall(street, color, null);
        Type localVarReturnType = new TypeToken<ControlTrafficLights200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Controls the traffic lights (asynchronously)
     * Controls the traffic lights of the specified street.
     * @param street Street whose corresponding traffic lights will be controlled. (required)
     * @param color Traffic Lights color. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switching traffic lights status successfully worked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Switching traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Switching traffic lights status  failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlTrafficLightsAsync(String street, String color, final ApiCallback<ControlTrafficLights200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = controlTrafficLightsValidateBeforeCall(street, color, _callback);
        Type localVarReturnType = new TypeToken<ControlTrafficLights200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param id Users ID (Username) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Deleting user failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUser(Async)");
        }

        return deleteUserCall(id, _callback);

    }

    /**
     * Delete existing user
     * User with id will be deleted.
     * @param id Users ID (Username) (required)
     * @return DeleteUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Deleting user failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUser200Response deleteUser(Integer id) throws ApiException {
        ApiResponse<DeleteUser200Response> localVarResp = deleteUserWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete existing user
     * User with id will be deleted.
     * @param id Users ID (Username) (required)
     * @return ApiResponse&lt;DeleteUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Deleting user failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteUser200Response> deleteUserWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete existing user (asynchronously)
     * User with id will be deleted.
     * @param id Users ID (Username) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Deleting user failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(Integer id, final ApiCallback<DeleteUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllScheduledTrafficLightsEvents
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieving scheduled events successfully worked. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving scheduled events failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllScheduledTrafficLightsEventsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/times";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllScheduledTrafficLightsEventsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllScheduledTrafficLightsEventsCall(_callback);

    }

    /**
     * Returns all scheduled traffic lights events
     * Returns all scheduled traffic lights events
     * @return GetAllScheduledTrafficLightsEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieving scheduled events successfully worked. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving scheduled events failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public GetAllScheduledTrafficLightsEvents200Response getAllScheduledTrafficLightsEvents() throws ApiException {
        ApiResponse<GetAllScheduledTrafficLightsEvents200Response> localVarResp = getAllScheduledTrafficLightsEventsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns all scheduled traffic lights events
     * Returns all scheduled traffic lights events
     * @return ApiResponse&lt;GetAllScheduledTrafficLightsEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieving scheduled events successfully worked. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving scheduled events failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllScheduledTrafficLightsEvents200Response> getAllScheduledTrafficLightsEventsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllScheduledTrafficLightsEventsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAllScheduledTrafficLightsEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all scheduled traffic lights events (asynchronously)
     * Returns all scheduled traffic lights events
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieving scheduled events successfully worked. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving scheduled events failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllScheduledTrafficLightsEventsAsync(final ApiCallback<GetAllScheduledTrafficLightsEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllScheduledTrafficLightsEventsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAllScheduledTrafficLightsEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllUsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned users successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving all users failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUsersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllUsersCall(_callback);

    }

    /**
     * Retrieve all users
     * All registered Users will be retrieved (admin only).
     * @return List&lt;Map&lt;String, GetAllUsers200ResponseInnerValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned users successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving all users failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, GetAllUsers200ResponseInnerValue>> getAllUsers() throws ApiException {
        ApiResponse<List<Map<String, GetAllUsers200ResponseInnerValue>>> localVarResp = getAllUsersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve all users
     * All registered Users will be retrieved (admin only).
     * @return ApiResponse&lt;List&lt;Map&lt;String, GetAllUsers200ResponseInnerValue&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned users successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving all users failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, GetAllUsers200ResponseInnerValue>>> getAllUsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllUsersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Map<String, GetAllUsers200ResponseInnerValue>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all users (asynchronously)
     * All registered Users will be retrieved (admin only).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned users successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving all users failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUsersAsync(final ApiCallback<List<Map<String, GetAllUsers200ResponseInnerValue>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUsersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Map<String, GetAllUsers200ResponseInnerValue>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableStreets
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned Traffic Lights streets successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving traffic lights status failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableStreetsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableStreetsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAvailableStreetsCall(_callback);

    }

    /**
     * Traffic Lights available streets
     * Traffic Lights available streets will be returned
     * @return GetAvailableStreets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned Traffic Lights streets successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving traffic lights status failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableStreets200Response getAvailableStreets() throws ApiException {
        ApiResponse<GetAvailableStreets200Response> localVarResp = getAvailableStreetsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Traffic Lights available streets
     * Traffic Lights available streets will be returned
     * @return ApiResponse&lt;GetAvailableStreets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned Traffic Lights streets successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving traffic lights status failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAvailableStreets200Response> getAvailableStreetsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAvailableStreetsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAvailableStreets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Traffic Lights available streets (asynchronously)
     * Traffic Lights available streets will be returned
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned Traffic Lights streets successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving traffic lights status failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableStreetsAsync(final ApiCallback<GetAvailableStreets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableStreetsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAvailableStreets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrafficLightsStatus
     * @param street Street whose corresponding traffic lights status will be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned Traffic Lights status successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Retrieving traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving traffic lights status failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrafficLightsStatusCall(String street, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streets/{street}"
            .replace("{" + "street" + "}", localVarApiClient.escapeString(street.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrafficLightsStatusValidateBeforeCall(String street, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'street' is set
        if (street == null) {
            throw new ApiException("Missing the required parameter 'street' when calling getTrafficLightsStatus(Async)");
        }

        return getTrafficLightsStatusCall(street, _callback);

    }

    /**
     * Traffic Lights status
     * Current Traffic Lights status of the specified street will be returned.
     * @param street Street whose corresponding traffic lights status will be returned. (required)
     * @return GetTrafficLightsStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned Traffic Lights status successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Retrieving traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving traffic lights status failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public GetTrafficLightsStatus200Response getTrafficLightsStatus(String street) throws ApiException {
        ApiResponse<GetTrafficLightsStatus200Response> localVarResp = getTrafficLightsStatusWithHttpInfo(street);
        return localVarResp.getData();
    }

    /**
     * Traffic Lights status
     * Current Traffic Lights status of the specified street will be returned.
     * @param street Street whose corresponding traffic lights status will be returned. (required)
     * @return ApiResponse&lt;GetTrafficLightsStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned Traffic Lights status successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Retrieving traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving traffic lights status failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTrafficLightsStatus200Response> getTrafficLightsStatusWithHttpInfo(String street) throws ApiException {
        okhttp3.Call localVarCall = getTrafficLightsStatusValidateBeforeCall(street, null);
        Type localVarReturnType = new TypeToken<GetTrafficLightsStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Traffic Lights status (asynchronously)
     * Current Traffic Lights status of the specified street will be returned.
     * @param street Street whose corresponding traffic lights status will be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned Traffic Lights status successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Retrieving traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Retrieving traffic lights status failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrafficLightsStatusAsync(String street, final ApiCallback<GetTrafficLightsStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrafficLightsStatusValidateBeforeCall(street, _callback);
        Type localVarReturnType = new TypeToken<GetTrafficLightsStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserRole
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned users successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRoleCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRoleValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserRoleCall(_callback);

    }

    /**
     * Retrieve User status (role)
     * User&#39;s role will be returned (admin 0, user 1, none -1).
     * @return GetUserRole200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned users successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserRole200Response getUserRole() throws ApiException {
        ApiResponse<GetUserRole200Response> localVarResp = getUserRoleWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve User status (role)
     * User&#39;s role will be returned (admin 0, user 1, none -1).
     * @return ApiResponse&lt;GetUserRole200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned users successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserRole200Response> getUserRoleWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserRoleValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetUserRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve User status (role) (asynchronously)
     * User&#39;s role will be returned (admin 0, user 1, none -1).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned users successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRoleAsync(final ApiCallback<GetUserRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRoleValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetUserRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginUser
     * @param password The password for login. (optional)
     * @param username The username for login. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully logged in. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User login failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginUserCall(String password, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginUserValidateBeforeCall(String password, String username, final ApiCallback _callback) throws ApiException {
        return loginUserCall(password, username, _callback);

    }

    /**
     * User login
     * User login. New session will be started.
     * @param password The password for login. (optional)
     * @param username The username for login. (optional)
     * @return LoginUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully logged in. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User login failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public LoginUser200Response loginUser(String password, String username) throws ApiException {
        ApiResponse<LoginUser200Response> localVarResp = loginUserWithHttpInfo(password, username);
        return localVarResp.getData();
    }

    /**
     * User login
     * User login. New session will be started.
     * @param password The password for login. (optional)
     * @param username The username for login. (optional)
     * @return ApiResponse&lt;LoginUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully logged in. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User login failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginUser200Response> loginUserWithHttpInfo(String password, String username) throws ApiException {
        okhttp3.Call localVarCall = loginUserValidateBeforeCall(password, username, null);
        Type localVarReturnType = new TypeToken<LoginUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User login (asynchronously)
     * User login. New session will be started.
     * @param password The password for login. (optional)
     * @param username The username for login. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully logged in. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User login failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginUserAsync(String password, String username, final ApiCallback<LoginUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginUserValidateBeforeCall(password, username, _callback);
        Type localVarReturnType = new TypeToken<LoginUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logoutUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully logged out. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logoutUserCall(_callback);

    }

    /**
     * User logout
     * User will be logged out.
     * @return LogoutUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully logged out. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized. </td><td>  -  </td></tr>
     </table>
     */
    public LogoutUser200Response logoutUser() throws ApiException {
        ApiResponse<LogoutUser200Response> localVarResp = logoutUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * User logout
     * User will be logged out.
     * @return ApiResponse&lt;LogoutUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully logged out. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutUser200Response> logoutUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logoutUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LogoutUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User logout (asynchronously)
     * User will be logged out.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User successfully logged out. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutUserAsync(final ApiCallback<LogoutUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LogoutUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleTrafficLightsControl
     * @param street  (required)
     * @param color  (required)
     * @param day  (optional)
     * @param hours  (optional)
     * @param minutes  (optional)
     * @param month  (optional)
     * @param seconds  (optional)
     * @param year  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switching traffic lights status successfully worked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Switching traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Switching traffic lights status  failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleTrafficLightsControlCall(String street, String color, Integer day, Integer hours, Integer minutes, Integer month, Integer seconds, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streets/{street}/colors/{color}/time"
            .replace("{" + "street" + "}", localVarApiClient.escapeString(street.toString()))
            .replace("{" + "color" + "}", localVarApiClient.escapeString(color.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (day != null) {
            localVarFormParams.put("day", day);
        }

        if (hours != null) {
            localVarFormParams.put("hours", hours);
        }

        if (minutes != null) {
            localVarFormParams.put("minutes", minutes);
        }

        if (month != null) {
            localVarFormParams.put("month", month);
        }

        if (seconds != null) {
            localVarFormParams.put("seconds", seconds);
        }

        if (year != null) {
            localVarFormParams.put("year", year);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleTrafficLightsControlValidateBeforeCall(String street, String color, Integer day, Integer hours, Integer minutes, Integer month, Integer seconds, Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'street' is set
        if (street == null) {
            throw new ApiException("Missing the required parameter 'street' when calling scheduleTrafficLightsControl(Async)");
        }

        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling scheduleTrafficLightsControl(Async)");
        }

        return scheduleTrafficLightsControlCall(street, color, day, hours, minutes, month, seconds, year, _callback);

    }

    /**
     * Scheduled control of the traffic lights
     * Schedules the controlling of the traffic lights of the specified street to green or red.
     * @param street  (required)
     * @param color  (required)
     * @param day  (optional)
     * @param hours  (optional)
     * @param minutes  (optional)
     * @param month  (optional)
     * @param seconds  (optional)
     * @param year  (optional)
     * @return ControlTrafficLights401Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switching traffic lights status successfully worked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Switching traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Switching traffic lights status  failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ControlTrafficLights401Response scheduleTrafficLightsControl(String street, String color, Integer day, Integer hours, Integer minutes, Integer month, Integer seconds, Integer year) throws ApiException {
        ApiResponse<ControlTrafficLights401Response> localVarResp = scheduleTrafficLightsControlWithHttpInfo(street, color, day, hours, minutes, month, seconds, year);
        return localVarResp.getData();
    }

    /**
     * Scheduled control of the traffic lights
     * Schedules the controlling of the traffic lights of the specified street to green or red.
     * @param street  (required)
     * @param color  (required)
     * @param day  (optional)
     * @param hours  (optional)
     * @param minutes  (optional)
     * @param month  (optional)
     * @param seconds  (optional)
     * @param year  (optional)
     * @return ApiResponse&lt;ControlTrafficLights401Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switching traffic lights status successfully worked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Switching traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Switching traffic lights status  failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControlTrafficLights401Response> scheduleTrafficLightsControlWithHttpInfo(String street, String color, Integer day, Integer hours, Integer minutes, Integer month, Integer seconds, Integer year) throws ApiException {
        okhttp3.Call localVarCall = scheduleTrafficLightsControlValidateBeforeCall(street, color, day, hours, minutes, month, seconds, year, null);
        Type localVarReturnType = new TypeToken<ControlTrafficLights401Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Scheduled control of the traffic lights (asynchronously)
     * Schedules the controlling of the traffic lights of the specified street to green or red.
     * @param street  (required)
     * @param color  (required)
     * @param day  (optional)
     * @param hours  (optional)
     * @param minutes  (optional)
     * @param month  (optional)
     * @param seconds  (optional)
     * @param year  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switching traffic lights status successfully worked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Switching traffic lights status failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Switching traffic lights status  failed (unauthorized). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleTrafficLightsControlAsync(String street, String color, Integer day, Integer hours, Integer minutes, Integer month, Integer seconds, Integer year, final ApiCallback<ControlTrafficLights401Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleTrafficLightsControlValidateBeforeCall(street, color, day, hours, minutes, month, seconds, year, _callback);
        Type localVarReturnType = new TypeToken<ControlTrafficLights401Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
